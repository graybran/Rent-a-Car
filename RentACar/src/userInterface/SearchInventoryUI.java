package userInterface;

import core.CarInventorySystem;
import core.Vehicle;
import java.util.ArrayList;
import javax.swing.JOptionPane;

public class SearchInventoryUI extends javax.swing.JPanel {    

    private static Vehicle foundVehicle;
    
    /**
     * Creates new form SearchInventoryUI
     */
    public SearchInventoryUI() {
        initComponents();
        searchResultArea.setEditable(false);
        jPanel1.setVisible(true);
        
        // Adds an "OK" dialog
        Object[] options = {"OK"};
//        int result = JOptionPane.showOptionDialog(null,
//                   this,"Title",
//                   JOptionPane.PLAIN_MESSAGE,
//                   JOptionPane.QUESTION_MESSAGE,
//                   null,
//                   options,
//                   options[0]);
        int result = JOptionPane.showOptionDialog(null, this, 
                "Search Inventory", JOptionPane.PLAIN_MESSAGE, 
                JOptionPane.INFORMATION_MESSAGE, null, options, 
                options[0]);
        
        
        // Logic for OKAY or CANCEL button press
        if (result == JOptionPane.OK_OPTION) 
        {
            if(ValidateInput()) {
                
                if(searchResultArea.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "No search was "
                            + "performed. Please try again.", "Information", 
                            JOptionPane.INFORMATION_MESSAGE);
                }
                
                //int searchID = Integer.parseInt(searchIDField.getText());
                
//                    CarInventorySystem inventory = new CarInventorySystem();
//                    Vehicle foundVehicle = inventory.SearchVehicle(searchID);
//                
//                    if(foundVehicle != null) {
//                        JOptionPane.showMessageDialog(null, "Found vehicle: " + 
//                                foundVehicle.getYear() + " " + foundVehicle.getMake() + 
//                                " " + foundVehicle.getModel() + " " + 
//                                foundVehicle.getColor() + " " + 
//                                foundVehicle.getCarClass() + " for a daily price of $" + 
//                                foundVehicle.getDailyPrice(), "Vehicle Found", 
//                                JOptionPane.INFORMATION_MESSAGE);
//                    }
//                    else {
//                        JOptionPane.showMessageDialog(null, 
//                                "Error: The requested vehicle was not found. "
//                                        + "Please try again.", "Error", 
//                                        JOptionPane.ERROR_MESSAGE);
//                    }
            }
//            else {
//                JOptionPane.showMessageDialog(null, "The ID field is blank. "
//                        + "Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
//            }
            
            
//            Customer addedCustomer = new Customer();
//            addedCustomer.setFirstName(first);
//            addedCustomer.setLastName(last);
//            addedCustomer.setAge(age);
//            addedCustomer.setPhoneNumber(phone);
//            addedCustomer.setEmailAddress(email);
//            addedCustomer.StoreCustomer();
            
//            CustomerStorageSystem customerSystem = new CustomerStorageSystem();
//            customerSystem.RegisterCustomer(first, last, age, phone, email);
        } 
        else 
        {
            System.out.println("Cancelled");
            
            if(foundVehicle != null) {
                foundVehicle = null;
            }
        }
    }
    
    private boolean ValidateInput() {
        return !searchIDField.getText().isEmpty();
    }
    
    public static String ReturnFoundVehicleInformation() {
        if(foundVehicle != null) {
            return foundVehicle.getMake() + " " + foundVehicle.getModel();
        }
        return null;
    }
    
    public static Vehicle ReturnFoundVehicle() {
        if(foundVehicle != null) {
            return foundVehicle;
        }
        return null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        searchIDField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        searchBySelection = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        searchResultArea = new javax.swing.JTextArea();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Search"));

        jLabel1.setText("Search by...");

        searchIDField.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                searchIDFieldActionPerformed(evt);
            }
        });

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                searchButtonActionPerformed(evt);
            }
        });

        searchBySelection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ID", "Make", "Model", "Year", "Class", "Color" }));
        searchBySelection.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                searchBySelectionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addGap(34, 34, 34)
                        .addComponent(searchBySelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(searchIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(79, 79, 79)
                        .addComponent(searchButton)))
                .addContainerGap(157, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(searchBySelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        searchResultArea.setColumns(20);
        searchResultArea.setRows(5);
        jScrollPane2.setViewportView(searchResultArea);

        jScrollPane3.setViewportView(jScrollPane2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void searchIDFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchIDFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchIDFieldActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed

        
        //Currently only lists one item
        //Also lots of formatting to be done
        String comboInput = searchBySelection.getSelectedItem().toString();
        
        if(searchIDField.getText().isEmpty()) {
            if(comboInput.equals("ID")) {
                JOptionPane.showMessageDialog(null, "Please enter an ID.", 
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
            else {
                JOptionPane.showMessageDialog(null, "Please enter a "
                        + comboInput + ".", "Error", JOptionPane.ERROR_MESSAGE);
            }
            return;
        }
        
        int i=0;
        Vehicle arrayElement;
        int size = CarInventorySystem.getSize();
        boolean flag = false;        
        ArrayList<Vehicle> searchResults = new ArrayList();
        
        CarInventorySystem inventory = new CarInventorySystem();

        if(comboInput.equals("ID")){
            int id = Integer.parseInt(searchIDField.getText());
            arrayElement = CarInventorySystem.getCar(id);
            if(arrayElement != null)
            {
                searchResults.add(arrayElement);
                flag = true;
            }
        }
        else if(comboInput.equals("Make")){
            String make = searchIDField.getText();
            for(i=0;i<size;i++)
            {
                arrayElement = CarInventorySystem.getCar(i);
                
                if(arrayElement != null)
                {
                    System.out.println(arrayElement.getMake());
                    if(arrayElement.getMake().equals(make)){
                        /*jTextArea1.setText(arrayElement.getID() + ": " + arrayElement.getColor() + " "  + arrayElement.getYear()
                                            + " " + arrayElement.getMake() + " " + arrayElement.getModel());
                        */
                        searchResults.add(arrayElement);
                        flag = true;
                    }
                }
            }
        }
        else if(comboInput.equals("Model")){
            String model = searchIDField.getText();
            for(i=0;i<size;i++)
            {
                arrayElement = CarInventorySystem.getCar(i);
                
                if(arrayElement != null)
                {
                    System.out.println(arrayElement.getModel());
                    if(arrayElement.getModel().equals(model))
                    {
                        searchResults.add(arrayElement);
                        flag = true;
                    }
                }
            }
        }
        else if(comboInput.equals("Year")){
            int year = Integer.parseInt(searchIDField.getText());
            for(i=0;i<size;i++){
                arrayElement = CarInventorySystem.getCar(i);
                
                if(arrayElement != null)
                {
                    System.out.println(arrayElement.getYear());
                    if(arrayElement.getYear() == year){
                        searchResults.add(arrayElement);
                        flag = true;
                    }
                }
            }
        }
        else if(comboInput.equals("Class")){
            String carClass = searchIDField.getText();
            for(i=0;i<size;i++){
                arrayElement = CarInventorySystem.getCar(i);
                
                if(arrayElement != null)
                {
                    System.out.println(arrayElement.getCarClass());
                    if(arrayElement.getCarClass().equals(carClass))
                    {
                        searchResults.add(arrayElement);
                        flag = true;
                    }
                }
            }
        }
        else if(comboInput.equals("Color")){
            String color = searchIDField.getText();
            for(i=0;i<size;i++){
                arrayElement = CarInventorySystem.getCar(i);
                if(arrayElement != null)
                {
                    System.out.println(arrayElement.getColor());
                    if(arrayElement.getColor().equals(color))
                    {
                        searchResults.add(arrayElement);
                        flag = true;
                    }
                }
            }
        }

        if(flag == true)
        {
            for(i=0; i<searchResults.size(); i++)
            {
                searchResultArea.setText(searchResults.size() + " result(s) found:\n\n" );
                searchResultArea.append("Vehicle ID: " + searchResults.get(i).getID() + "\n");
                searchResultArea.append("Make: " + searchResults.get(i).getMake() + "\n");
                searchResultArea.append("Model: " + searchResults.get(i).getModel() + "\n");
                searchResultArea.append("Year: " + searchResults.get(i).getYear() + "\n");
                searchResultArea.append("Color: " + searchResults.get(i).getColor() + "\n");


            }
                        
            CarInventorySystem.setSearchResults(searchResults);
            
            foundVehicle = searchResults.get(0);
        }
        else
        {
            searchResultArea.setText("No car found");
        }
            
    }//GEN-LAST:event_searchButtonActionPerformed

    private void searchBySelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBySelectionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchBySelectionActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton searchButton;
    private javax.swing.JComboBox<String> searchBySelection;
    public javax.swing.JTextField searchIDField;
    private javax.swing.JTextArea searchResultArea;
    // End of variables declaration//GEN-END:variables
}
