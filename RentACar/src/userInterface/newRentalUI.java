package userInterface;

import javax.swing.JOptionPane;
import core.*;
import java.io.FileNotFoundException;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import rentacar.*;

public class newRentalUI extends javax.swing.JPanel
{
    
    private String foundVehicleInformation;

    /**
     * Creates new form NewJPanel
     */
    public newRentalUI() throws FileNotFoundException
    {
        initComponents();
        
        // Adds an "OK" and "CANCEL" dialog
        int result = JOptionPane.showConfirmDialog(null, this, "New Rental",
            JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        
        // Logic for OKAY or CANCEL button press
        if (result == JOptionPane.OK_OPTION) 
        {
            //Stores customer information from text fields
            //Search functionality isn't setup so I hardcoded a car choice there
//            Customer cTemp = new Customer();
//            cTemp.setAge(Integer.parseInt(ageField.getText()));
//            cTemp.setEmailAddress(emailField.getText());
//            cTemp.setFirstName(firstNameField.getText());
//            cTemp.setLastName(lastNameField.getText());
            //String car = carField.getText();
            //Integer ID = Integer.parseInt(car);
            
				// Calculate rental duration
				//int rentalDays = calculateRentalDuration();
				
				// Cost of rental
				//double cost = calculateRentalCost(rentalDays, rtemp2.vehicle.getDailyPrice());
            
            if(ValidateInput()) {
                Customer rentCustomer = new Customer();
                rentCustomer.setAge(Integer.parseInt(ageField.getText()));
                rentCustomer.setEmailAddress(emailField.getText());
                rentCustomer.setFirstName(firstNameField.getText());
                rentCustomer.setLastName(lastNameField.getText());
                rentCustomer.setPhoneNumber(phoneField.getText());
                
                CarInventorySystem inventory = new CarInventorySystem();

                CustomerStorageSystem storage = new CustomerStorageSystem();
                
                storage.RegisterCustomer(rentCustomer.getCustID(), rentCustomer.getFirstName(), rentCustomer.getLastName(),
                            rentCustomer.getAge(), rentCustomer.getPhoneNumber(), rentCustomer.getEmailAddress());

                
                Vehicle rentVehicle = SearchInventoryUI.ReturnFoundVehicle();
                
                if(rentCustomer.getAge() >= 18 && rentVehicle.isAvailability() == true) {
                    Rental newRental = new Rental(rentVehicle, rentCustomer);
                    newRental.AddRental();
                    rentVehicle.setAvailability(false);
                    newRental.PrintRentals();
                    inventory.StoreVehicle(rentVehicle, true);
                    
                    JOptionPane.showMessageDialog(null, "The rental was "
                            + "successful.", "Confirmation",
                            JOptionPane.INFORMATION_MESSAGE);
                }
                else if(rentVehicle.isAvailability() == false) {
                    JOptionPane.showMessageDialog(null, "That vehicle is currently "
                            + "rented. Please try again.", "Information", 
                            JOptionPane.INFORMATION_MESSAGE);
                }
                else if(rentCustomer.getAge() < 18) {
                    JOptionPane.showMessageDialog(null, "The customer must be at "
                            + "least 18 years old to rent a car. Please try again.", 
                            "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
            else {
                if(carField.getText().equals("Please choose a vehicle")) {
                    JOptionPane.showMessageDialog(null, "A vehicle to rent must be "
                            + "chosen to complete the rental. Please choose "
                            + "a vehicle.", "Error", JOptionPane.ERROR_MESSAGE);
                }
                else {
                    JOptionPane.showMessageDialog(null, "Some fields are left blank. "
                        + "Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
        else 
        {
            System.out.println("Cancelled");
        }        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lastNameLabel = new javax.swing.JLabel();
        phoneLabel = new javax.swing.JLabel();
        firstNameLabel = new javax.swing.JLabel();
        carLabel = new javax.swing.JLabel();
        emailLabel = new javax.swing.JLabel();
        lastNameField = new javax.swing.JTextField();
        firstNameField = new javax.swing.JTextField();
        phoneField = new javax.swing.JTextField();
        emailField = new javax.swing.JTextField();
        carField = new javax.swing.JTextField();
        searchCarButton = new javax.swing.JButton();
        ageLabel = new javax.swing.JLabel();
        ageField = new javax.swing.JTextField();

        lastNameLabel.setText("Last Name");

        phoneLabel.setText("Phone Number");

        firstNameLabel.setText("First Name");

        carLabel.setText("Car");

        emailLabel.setText("Email Address");

        lastNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastNameFieldActionPerformed(evt);
            }
        });

        firstNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstNameFieldActionPerformed(evt);
            }
        });

        carField.setEditable(false);
        carField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        carField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                carFieldActionPerformed(evt);
            }
        });

        searchCarButton.setText("Search...");
        searchCarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchCarButtonActionPerformed(evt);
            }
        });

        ageLabel.setText("Age");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ageLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(emailLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(phoneLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                        .addComponent(carLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(firstNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lastNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lastNameField)
                    .addComponent(firstNameField)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(carField, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchCarButton))
                    .addComponent(phoneField)
                    .addComponent(emailField)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ageField, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 313, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lastNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(firstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(carLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(carField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchCarButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(phoneLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(phoneField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emailField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ageField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void lastNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lastNameFieldActionPerformed

    private void firstNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_firstNameFieldActionPerformed

    private void carFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_carFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_carFieldActionPerformed

    private void searchCarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchCarButtonActionPerformed
        new SearchInventoryUI();
        foundVehicleInformation = SearchInventoryUI.ReturnFoundVehicleInformation();
        SetProperText();
    }//GEN-LAST:event_searchCarButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ageField;
    private javax.swing.JLabel ageLabel;
    private javax.swing.JTextField carField;
    private javax.swing.JLabel carLabel;
    private javax.swing.JTextField emailField;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JTextField firstNameField;
    private javax.swing.JLabel firstNameLabel;
    private javax.swing.JTextField lastNameField;
    private javax.swing.JLabel lastNameLabel;
    private javax.swing.JTextField phoneField;
    private javax.swing.JLabel phoneLabel;
    private javax.swing.JButton searchCarButton;
    // End of variables declaration//GEN-END:variables
/*
	private int calculateRentalDuration() 
	{
		Date start = startDateField.getDate();
		Date end = endDateField.getDate();
		long diff = end.getTime() - start.getTime();
		
		return (int) TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS);
	}
	
	private double calculateRentalCost(int rentalDuration, double price)
	{
		return rentalDuration * price;
	}
*/
    
    private void SetProperText() {
        if(foundVehicleInformation != null) {
            if(carField.getText().isEmpty()) {
                carField.setText(foundVehicleInformation);
            }
            else {
                carField.setText("");
                carField.setText(foundVehicleInformation);
            }
        }
        else {
            carField.setText("");
            carField.setText("Please choose a vehicle");
        }
    }

    private boolean ValidateInput() {
        if(firstNameField.getText().isEmpty() || lastNameField.getText().isEmpty() || 
                ageField.getText().isEmpty() || phoneField.getText().isEmpty() || 
                emailField.getText().isEmpty() || carField.getText().isEmpty()) {
            return false;
        }
        return true;
    }
}
